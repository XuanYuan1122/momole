package com.moemoe.lalala.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.moemoe.lalala.model.entity.AuthorInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTHOR_INFO".
*/
public class AuthorInfoDao extends AbstractDao<AuthorInfo, Long> {

    public static final String TABLENAME = "AUTHOR_INFO";

    /**
     * Properties of entity AuthorInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property HeadPath = new Property(1, String.class, "headPath", false, "HEAD_PATH");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property OpenId = new Property(3, String.class, "openId", false, "OPEN_ID");
        public final static Property Platform = new Property(4, String.class, "platform", false, "PLATFORM");
        public final static Property Token = new Property(5, String.class, "token", false, "TOKEN");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Coin = new Property(8, int.class, "coin", false, "COIN");
        public final static Property UserName = new Property(9, String.class, "userName", false, "USER_NAME");
        public final static Property Level = new Property(10, int.class, "level", false, "LEVEL");
        public final static Property OpenBag = new Property(11, boolean.class, "openBag", false, "OPEN_BAG");
        public final static Property RcToken = new Property(12, String.class, "rcToken", false, "RC_TOKEN");
        public final static Property VipTime = new Property(13, String.class, "vipTime", false, "VIP_TIME");
        public final static Property InviteNum = new Property(14, int.class, "inviteNum", false, "INVITE_NUM");
    }


    public AuthorInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTHOR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"HEAD_PATH\" TEXT," + // 1: headPath
                "\"USER_ID\" TEXT UNIQUE ," + // 2: userId
                "\"OPEN_ID\" TEXT," + // 3: openId
                "\"PLATFORM\" TEXT," + // 4: platform
                "\"TOKEN\" TEXT," + // 5: token
                "\"PASSWORD\" TEXT," + // 6: password
                "\"PHONE\" TEXT," + // 7: phone
                "\"COIN\" INTEGER NOT NULL ," + // 8: coin
                "\"USER_NAME\" TEXT," + // 9: userName
                "\"LEVEL\" INTEGER NOT NULL ," + // 10: level
                "\"OPEN_BAG\" INTEGER NOT NULL ," + // 11: openBag
                "\"RC_TOKEN\" TEXT," + // 12: rcToken
                "\"VIP_TIME\" TEXT," + // 13: vipTime
                "\"INVITE_NUM\" INTEGER NOT NULL );"); // 14: inviteNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTHOR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AuthorInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(2, headPath);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(4, openId);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(5, platform);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
        stmt.bindLong(9, entity.getCoin());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(10, userName);
        }
        stmt.bindLong(11, entity.getLevel());
        stmt.bindLong(12, entity.getOpenBag() ? 1L: 0L);
 
        String rcToken = entity.getRcToken();
        if (rcToken != null) {
            stmt.bindString(13, rcToken);
        }
 
        String vipTime = entity.getVipTime();
        if (vipTime != null) {
            stmt.bindString(14, vipTime);
        }
        stmt.bindLong(15, entity.getInviteNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AuthorInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(2, headPath);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(4, openId);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(5, platform);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
        stmt.bindLong(9, entity.getCoin());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(10, userName);
        }
        stmt.bindLong(11, entity.getLevel());
        stmt.bindLong(12, entity.getOpenBag() ? 1L: 0L);
 
        String rcToken = entity.getRcToken();
        if (rcToken != null) {
            stmt.bindString(13, rcToken);
        }
 
        String vipTime = entity.getVipTime();
        if (vipTime != null) {
            stmt.bindString(14, vipTime);
        }
        stmt.bindLong(15, entity.getInviteNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AuthorInfo readEntity(Cursor cursor, int offset) {
        AuthorInfo entity = new AuthorInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // openId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // platform
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.getInt(offset + 8), // coin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userName
            cursor.getInt(offset + 10), // level
            cursor.getShort(offset + 11) != 0, // openBag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rcToken
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // vipTime
            cursor.getInt(offset + 14) // inviteNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AuthorInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setHeadPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpenId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlatform(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCoin(cursor.getInt(offset + 8));
        entity.setUserName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLevel(cursor.getInt(offset + 10));
        entity.setOpenBag(cursor.getShort(offset + 11) != 0);
        entity.setRcToken(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVipTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInviteNum(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AuthorInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AuthorInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AuthorInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
