package com.moemoe.lalala.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.moemoe.lalala.model.entity.MapDbEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAP_DB_ENTITY".
*/
public class MapDbEntityDao extends AbstractDao<MapDbEntity, String> {

    public static final String TABLENAME = "MAP_DB_ENTITY";

    /**
     * Properties of entity MapDbEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Image_path = new Property(2, String.class, "image_path", false, "IMAGE_PATH");
        public final static Property Image_w = new Property(3, int.class, "image_w", false, "IMAGE_W");
        public final static Property Image_h = new Property(4, int.class, "image_h", false, "IMAGE_H");
        public final static Property Schema = new Property(5, String.class, "schema", false, "SCHEMA");
        public final static Property PointX = new Property(6, int.class, "pointX", false, "POINT_X");
        public final static Property PointY = new Property(7, int.class, "pointY", false, "POINT_Y");
        public final static Property Text = new Property(8, String.class, "text", false, "TEXT");
        public final static Property Shows = new Property(9, String.class, "shows", false, "SHOWS");
        public final static Property FileName = new Property(10, String.class, "fileName", false, "FILE_NAME");
        public final static Property DownloadState = new Property(11, int.class, "downloadState", false, "DOWNLOAD_STATE");
    }


    public MapDbEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MapDbEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAP_DB_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMAGE_PATH\" TEXT," + // 2: image_path
                "\"IMAGE_W\" INTEGER NOT NULL ," + // 3: image_w
                "\"IMAGE_H\" INTEGER NOT NULL ," + // 4: image_h
                "\"SCHEMA\" TEXT," + // 5: schema
                "\"POINT_X\" INTEGER NOT NULL ," + // 6: pointX
                "\"POINT_Y\" INTEGER NOT NULL ," + // 7: pointY
                "\"TEXT\" TEXT," + // 8: text
                "\"SHOWS\" TEXT," + // 9: shows
                "\"FILE_NAME\" TEXT," + // 10: fileName
                "\"DOWNLOAD_STATE\" INTEGER NOT NULL );"); // 11: downloadState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAP_DB_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MapDbEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(3, image_path);
        }
        stmt.bindLong(4, entity.getImage_w());
        stmt.bindLong(5, entity.getImage_h());
 
        String schema = entity.getSchema();
        if (schema != null) {
            stmt.bindString(6, schema);
        }
        stmt.bindLong(7, entity.getPointX());
        stmt.bindLong(8, entity.getPointY());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(9, text);
        }
 
        String shows = entity.getShows();
        if (shows != null) {
            stmt.bindString(10, shows);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(11, fileName);
        }
        stmt.bindLong(12, entity.getDownloadState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MapDbEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image_path = entity.getImage_path();
        if (image_path != null) {
            stmt.bindString(3, image_path);
        }
        stmt.bindLong(4, entity.getImage_w());
        stmt.bindLong(5, entity.getImage_h());
 
        String schema = entity.getSchema();
        if (schema != null) {
            stmt.bindString(6, schema);
        }
        stmt.bindLong(7, entity.getPointX());
        stmt.bindLong(8, entity.getPointY());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(9, text);
        }
 
        String shows = entity.getShows();
        if (shows != null) {
            stmt.bindString(10, shows);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(11, fileName);
        }
        stmt.bindLong(12, entity.getDownloadState());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MapDbEntity readEntity(Cursor cursor, int offset) {
        MapDbEntity entity = new MapDbEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_path
            cursor.getInt(offset + 3), // image_w
            cursor.getInt(offset + 4), // image_h
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // schema
            cursor.getInt(offset + 6), // pointX
            cursor.getInt(offset + 7), // pointY
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // text
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shows
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileName
            cursor.getInt(offset + 11) // downloadState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MapDbEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_path(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage_w(cursor.getInt(offset + 3));
        entity.setImage_h(cursor.getInt(offset + 4));
        entity.setSchema(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPointX(cursor.getInt(offset + 6));
        entity.setPointY(cursor.getInt(offset + 7));
        entity.setText(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShows(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDownloadState(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MapDbEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MapDbEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MapDbEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
