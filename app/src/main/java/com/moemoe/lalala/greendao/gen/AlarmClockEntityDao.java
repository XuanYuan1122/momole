package com.moemoe.lalala.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.moemoe.lalala.model.entity.AlarmClockEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_CLOCK_ENTITY".
*/
public class AlarmClockEntityDao extends AbstractDao<AlarmClockEntity, Long> {

    public static final String TABLENAME = "ALARM_CLOCK_ENTITY";

    /**
     * Properties of entity AlarmClockEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Hour = new Property(1, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(2, int.class, "minute", false, "MINUTE");
        public final static Property RoleName = new Property(3, String.class, "roleName", false, "ROLE_NAME");
        public final static Property RoleId = new Property(4, String.class, "roleId", false, "ROLE_ID");
        public final static Property Repeat = new Property(5, String.class, "repeat", false, "REPEAT");
        public final static Property Weeks = new Property(6, String.class, "weeks", false, "WEEKS");
        public final static Property Tag = new Property(7, String.class, "tag", false, "TAG");
        public final static Property RingName = new Property(8, String.class, "ringName", false, "RING_NAME");
        public final static Property RingUrl = new Property(9, int.class, "ringUrl", false, "RING_URL");
        public final static Property OnOff = new Property(10, boolean.class, "onOff", false, "ON_OFF");
    }


    public AlarmClockEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmClockEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_CLOCK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"HOUR\" INTEGER NOT NULL ," + // 1: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 2: minute
                "\"ROLE_NAME\" TEXT," + // 3: roleName
                "\"ROLE_ID\" TEXT," + // 4: roleId
                "\"REPEAT\" TEXT," + // 5: repeat
                "\"WEEKS\" TEXT," + // 6: weeks
                "\"TAG\" TEXT," + // 7: tag
                "\"RING_NAME\" TEXT," + // 8: ringName
                "\"RING_URL\" INTEGER NOT NULL ," + // 9: ringUrl
                "\"ON_OFF\" INTEGER NOT NULL );"); // 10: onOff
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_CLOCK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmClockEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getHour());
        stmt.bindLong(3, entity.getMinute());
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(4, roleName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(5, roleId);
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(6, repeat);
        }
 
        String weeks = entity.getWeeks();
        if (weeks != null) {
            stmt.bindString(7, weeks);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(8, tag);
        }
 
        String ringName = entity.getRingName();
        if (ringName != null) {
            stmt.bindString(9, ringName);
        }
        stmt.bindLong(10, entity.getRingUrl());
        stmt.bindLong(11, entity.getOnOff() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmClockEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getHour());
        stmt.bindLong(3, entity.getMinute());
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(4, roleName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(5, roleId);
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(6, repeat);
        }
 
        String weeks = entity.getWeeks();
        if (weeks != null) {
            stmt.bindString(7, weeks);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(8, tag);
        }
 
        String ringName = entity.getRingName();
        if (ringName != null) {
            stmt.bindString(9, ringName);
        }
        stmt.bindLong(10, entity.getRingUrl());
        stmt.bindLong(11, entity.getOnOff() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmClockEntity readEntity(Cursor cursor, int offset) {
        AlarmClockEntity entity = new AlarmClockEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // hour
            cursor.getInt(offset + 2), // minute
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roleName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roleId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // repeat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weeks
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ringName
            cursor.getInt(offset + 9), // ringUrl
            cursor.getShort(offset + 10) != 0 // onOff
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmClockEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setHour(cursor.getInt(offset + 1));
        entity.setMinute(cursor.getInt(offset + 2));
        entity.setRoleName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoleId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRepeat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeeks(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRingName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRingUrl(cursor.getInt(offset + 9));
        entity.setOnOff(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmClockEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmClockEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmClockEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
