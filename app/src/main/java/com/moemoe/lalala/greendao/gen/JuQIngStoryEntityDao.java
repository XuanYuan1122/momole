package com.moemoe.lalala.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.moemoe.lalala.model.entity.JuQIngStoryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JU_QING_STORY_ENTITY".
*/
public class JuQIngStoryEntityDao extends AbstractDao<JuQIngStoryEntity, String> {

    public static final String TABLENAME = "JU_QING_STORY_ENTITY";

    /**
     * Properties of entity JuQIngStoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StoryId = new Property(0, String.class, "storyId", true, "STORY_ID");
        public final static Property Json = new Property(1, String.class, "json", false, "JSON");
        public final static Property Extra = new Property(2, String.class, "extra", false, "EXTRA");
        public final static Property Level = new Property(3, int.class, "level", false, "LEVEL");
    }


    public JuQIngStoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public JuQIngStoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JU_QING_STORY_ENTITY\" (" + //
                "\"STORY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: storyId
                "\"JSON\" TEXT," + // 1: json
                "\"EXTRA\" TEXT," + // 2: extra
                "\"LEVEL\" INTEGER NOT NULL );"); // 3: level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JU_QING_STORY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JuQIngStoryEntity entity) {
        stmt.clearBindings();
 
        String storyId = entity.getStoryId();
        if (storyId != null) {
            stmt.bindString(1, storyId);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(2, json);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(3, extra);
        }
        stmt.bindLong(4, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JuQIngStoryEntity entity) {
        stmt.clearBindings();
 
        String storyId = entity.getStoryId();
        if (storyId != null) {
            stmt.bindString(1, storyId);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(2, json);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(3, extra);
        }
        stmt.bindLong(4, entity.getLevel());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public JuQIngStoryEntity readEntity(Cursor cursor, int offset) {
        JuQIngStoryEntity entity = new JuQIngStoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // storyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // json
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // extra
            cursor.getInt(offset + 3) // level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JuQIngStoryEntity entity, int offset) {
        entity.setStoryId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setJson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExtra(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(JuQIngStoryEntity entity, long rowId) {
        return entity.getStoryId();
    }
    
    @Override
    public String getKey(JuQIngStoryEntity entity) {
        if(entity != null) {
            return entity.getStoryId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JuQIngStoryEntity entity) {
        return entity.getStoryId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
